=begin
#DQT API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v2

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'cgi'

module OpenapiClient
  class TrnRequestsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Retrieves a TRN request
    # @param request_id [String] The unique ID the TRN request was created with.
    # @param [Hash] opts the optional parameters
    # @return [TrnRequestInfo]
    def v2_trn_requests_request_id_get(request_id, opts = {})
      data, _status_code, _headers = v2_trn_requests_request_id_get_with_http_info(request_id, opts)
      data
    end

    # Retrieves a TRN request
    # @param request_id [String] The unique ID the TRN request was created with.
    # @param [Hash] opts the optional parameters
    # @return [Array<(TrnRequestInfo, Integer, Hash)>] TrnRequestInfo data, response status code and response headers
    def v2_trn_requests_request_id_get_with_http_info(request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TrnRequestsApi.v2_trn_requests_request_id_get ...'
      end
      # verify the required parameter 'request_id' is set
      if @api_client.config.client_side_validation && request_id.nil?
        fail ArgumentError, "Missing the required parameter 'request_id' when calling TrnRequestsApi.v2_trn_requests_request_id_get"
      end
      # resource path
      local_var_path = '/v2/trn-requests/{requestId}'.sub('{' + 'requestId' + '}', CGI.escape(request_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TrnRequestInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"TrnRequestsApi.v2_trn_requests_request_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TrnRequestsApi#v2_trn_requests_request_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a request for a TRN
    # @param request_id [String] A unique ID that represents this request. If a request has already been created with this ID then that existing record&#39;s result is returned.
    # @param [Hash] opts the optional parameters
    # @option opts [GetOrCreateTrnRequest] :get_or_create_trn_request 
    # @return [TrnRequestInfo]
    def v2_trn_requests_request_id_put(request_id, opts = {})
      data, _status_code, _headers = v2_trn_requests_request_id_put_with_http_info(request_id, opts)
      data
    end

    # Creates a request for a TRN
    # @param request_id [String] A unique ID that represents this request. If a request has already been created with this ID then that existing record&#39;s result is returned.
    # @param [Hash] opts the optional parameters
    # @option opts [GetOrCreateTrnRequest] :get_or_create_trn_request 
    # @return [Array<(TrnRequestInfo, Integer, Hash)>] TrnRequestInfo data, response status code and response headers
    def v2_trn_requests_request_id_put_with_http_info(request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TrnRequestsApi.v2_trn_requests_request_id_put ...'
      end
      # verify the required parameter 'request_id' is set
      if @api_client.config.client_side_validation && request_id.nil?
        fail ArgumentError, "Missing the required parameter 'request_id' when calling TrnRequestsApi.v2_trn_requests_request_id_put"
      end
      # resource path
      local_var_path = '/v2/trn-requests/{requestId}'.sub('{' + 'requestId' + '}', CGI.escape(request_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'get_or_create_trn_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'TrnRequestInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"TrnRequestsApi.v2_trn_requests_request_id_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TrnRequestsApi#v2_trn_requests_request_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
